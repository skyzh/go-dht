// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chord.proto

package chord

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SuccessorRequest struct {
	K                    string   `protobuf:"bytes,1,opt,name=k,proto3" json:"k,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuccessorRequest) Reset()         { *m = SuccessorRequest{} }
func (m *SuccessorRequest) String() string { return proto.CompactTextString(m) }
func (*SuccessorRequest) ProtoMessage()    {}
func (*SuccessorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{0}
}

func (m *SuccessorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuccessorRequest.Unmarshal(m, b)
}
func (m *SuccessorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuccessorRequest.Marshal(b, m, deterministic)
}
func (m *SuccessorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessorRequest.Merge(m, src)
}
func (m *SuccessorRequest) XXX_Size() int {
	return xxx_messageInfo_SuccessorRequest.Size(m)
}
func (m *SuccessorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessorRequest proto.InternalMessageInfo

func (m *SuccessorRequest) GetK() string {
	if m != nil {
		return m.K
	}
	return ""
}

type SuccessorReply struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuccessorReply) Reset()         { *m = SuccessorReply{} }
func (m *SuccessorReply) String() string { return proto.CompactTextString(m) }
func (*SuccessorReply) ProtoMessage()    {}
func (*SuccessorReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_541dae51990542ec, []int{1}
}

func (m *SuccessorReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuccessorReply.Unmarshal(m, b)
}
func (m *SuccessorReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuccessorReply.Marshal(b, m, deterministic)
}
func (m *SuccessorReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessorReply.Merge(m, src)
}
func (m *SuccessorReply) XXX_Size() int {
	return xxx_messageInfo_SuccessorReply.Size(m)
}
func (m *SuccessorReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessorReply.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessorReply proto.InternalMessageInfo

func (m *SuccessorReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*SuccessorRequest)(nil), "chord.SuccessorRequest")
	proto.RegisterType((*SuccessorReply)(nil), "chord.SuccessorReply")
}

func init() { proto.RegisterFile("chord.proto", fileDescriptor_541dae51990542ec) }

var fileDescriptor_541dae51990542ec = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0xc8, 0x2f,
	0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x14, 0xb8, 0x04, 0x82,
	0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0xf3, 0x8b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x78, 0xb8, 0x18, 0xb3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x18, 0xb3, 0x95, 0x14, 0xb8,
	0xf8, 0x90, 0x54, 0x14, 0xe4, 0x54, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x40, 0x15, 0x30, 0x65,
	0xa6, 0x18, 0x79, 0x71, 0xb1, 0x3a, 0x83, 0x0c, 0x13, 0x72, 0xe4, 0xe2, 0x75, 0xcb, 0xcc, 0x4b,
	0x81, 0x2b, 0x17, 0x12, 0xd7, 0x83, 0x58, 0x89, 0x6e, 0x85, 0x94, 0x28, 0xa6, 0x44, 0x41, 0x4e,
	0xa5, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x75, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6b, 0xcc,
	0x5f, 0xd9, 0xac, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChordClient is the client API for Chord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChordClient interface {
	FindSuccessor(ctx context.Context, in *SuccessorRequest, opts ...grpc.CallOption) (*SuccessorReply, error)
}

type chordClient struct {
	cc *grpc.ClientConn
}

func NewChordClient(cc *grpc.ClientConn) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *SuccessorRequest, opts ...grpc.CallOption) (*SuccessorReply, error) {
	out := new(SuccessorReply)
	err := c.cc.Invoke(ctx, "/chord.Chord/FindSuccessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServer is the server API for Chord service.
type ChordServer interface {
	FindSuccessor(context.Context, *SuccessorRequest) (*SuccessorReply, error)
}

// UnimplementedChordServer can be embedded to have forward compatible implementations.
type UnimplementedChordServer struct {
}

func (*UnimplementedChordServer) FindSuccessor(ctx context.Context, req *SuccessorRequest) (*SuccessorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuccessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*SuccessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord.Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}
